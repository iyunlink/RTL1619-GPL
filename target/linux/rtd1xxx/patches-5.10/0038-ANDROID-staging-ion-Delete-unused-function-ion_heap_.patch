From c757a899442e6a87798c9cf048bd814d641a850b Mon Sep 17 00:00:00 2001
From: Hridya Valsaraju <hridya@google.com>
Date: Wed, 29 Jul 2020 18:15:00 -0700
Subject: [PATCH 38/50] ANDROID: staging: ion: Delete unused function
 ion_heap_buffer_zero

It was deleted in 5d41593935d9(staging: ion: refactor ion's heap
manipulators into a separate file) but was accidentally added back in
a64320f5b8e4(Merge 94709049fb84).

Fixes: a64320f5b8e4 ("Merge 94709049fb84 ("Merge branch 'akpm' (patches from Andrew)") into android-mainline")

Change-Id: I125d2a78cf4872c80391888e6cd6e10d359d20fa
Signed-off-by: Hridya Valsaraju <hridya@google.com>
---
 drivers/staging/android/ion/ion_heap.c | 44 ++++++++++++++++++++++++++
 1 file changed, 44 insertions(+)

diff --git a/drivers/staging/android/ion/ion_heap.c b/drivers/staging/android/ion/ion_heap.c
index 62c4736ba..aa8c554d8 100644
--- a/drivers/staging/android/ion/ion_heap.c
+++ b/drivers/staging/android/ion/ion_heap.c
@@ -188,6 +188,50 @@ int ion_heap_map_user(struct ion_heap *heap, struct ion_buffer *buffer,
 }
 EXPORT_SYMBOL_GPL(ion_heap_map_user);
 
+static int ion_heap_clear_pages(struct page **pages, int num, pgprot_t pgprot)
+{
+	void *addr = vmap(pages, num, VM_MAP, pgprot);
+
+	if (!addr)
+		return -ENOMEM;
+	memset(addr, 0, PAGE_SIZE * num);
+	vunmap(addr);
+
+	return 0;
+}
+
+static int ion_heap_sglist_zero(struct scatterlist *sgl, unsigned int nents,
+				pgprot_t pgprot)
+{
+	int p = 0;
+	int ret = 0;
+	struct sg_page_iter piter;
+	struct page *pages[32];
+
+	for_each_sg_page(sgl, &piter, nents, 0) {
+		pages[p++] = sg_page_iter_page(&piter);
+		if (p == ARRAY_SIZE(pages)) {
+			ret = ion_heap_clear_pages(pages, p, pgprot);
+			if (ret)
+				return ret;
+			p = 0;
+		}
+	}
+	if (p)
+		ret = ion_heap_clear_pages(pages, p, pgprot);
+
+	return ret;
+}
+
+int ion_heap_pages_zero(struct page *page, size_t size, pgprot_t pgprot)
+{
+	struct scatterlist sg;
+
+	sg_init_table(&sg, 1);
+	sg_set_page(&sg, page, size, 0);
+	return ion_heap_sglist_zero(&sg, 1, pgprot);
+}
+
 void ion_heap_freelist_add(struct ion_heap *heap, struct ion_buffer *buffer)
 {
 	spin_lock(&heap->free_lock);
-- 
2.17.1

