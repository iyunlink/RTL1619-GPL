From f4df070081da446b6fc7c63c663f6ca19497d175 Mon Sep 17 00:00:00 2001
From: Ken Tseng <ken.tseng@realtek.com>
Date: Tue, 8 Mar 2022 14:41:48 +0800
Subject: [PATCH 47/54] 828: usb: dwc3: Add USB_DWC3_RTK

---
 drivers/usb/dwc3/Kconfig  |  2 +-
 drivers/usb/dwc3/Makefile |  5 +++
 drivers/usb/dwc3/core.c   | 82 +++++++++++++++++++++++++++++++++++++++
 drivers/usb/dwc3/core.h   | 32 ++++++++++++++-
 drivers/usb/dwc3/gadget.c | 15 +++++++
 drivers/usb/dwc3/host.c   |  4 ++
 6 files changed, 138 insertions(+), 2 deletions(-)

diff --git a/drivers/usb/dwc3/Kconfig b/drivers/usb/dwc3/Kconfig
index d16ff8320..f6f92b40c 100644
--- a/drivers/usb/dwc3/Kconfig
+++ b/drivers/usb/dwc3/Kconfig
@@ -73,7 +73,7 @@ config USB_DWC3_RTK_DUAL_ROLE
 	  say 'Y' or 'M' if you have such device.
 
 config USB_DWC3_RTK_TYPE_C
-	bool "RTK DWC3 Type C Driver (dynamical host/device mode switch)"
+	tristate "RTK DWC3 Type C Driver (dynamical host/device mode switch)"
 	default USB_DWC3_RTK if (USB_DWC3_DUAL_ROLE)
 	depends on USB_DWC3_DUAL_ROLE
 	help
diff --git a/drivers/usb/dwc3/Makefile b/drivers/usb/dwc3/Makefile
index ae86da0dc..7a8dc82cc 100644
--- a/drivers/usb/dwc3/Makefile
+++ b/drivers/usb/dwc3/Makefile
@@ -51,3 +51,8 @@ obj-$(CONFIG_USB_DWC3_MESON_G12A)	+= dwc3-meson-g12a.o
 obj-$(CONFIG_USB_DWC3_OF_SIMPLE)	+= dwc3-of-simple.o
 obj-$(CONFIG_USB_DWC3_ST)		+= dwc3-st.o
 obj-$(CONFIG_USB_DWC3_QCOM)		+= dwc3-qcom.o
+obj-$(CONFIG_USB_DWC3_RTK)		+= dwc3-rtk.o
+obj-$(CONFIG_USB_DWC3_RTK)		+= dwc3-rtk-debugfs.o
+obj-$(CONFIG_USB_DWC3_RTK_DUAL_ROLE)	+= dwc3-rtk-drd.o
+obj-$(CONFIG_USB_DWC3_RTK_TYPE_C)	+= dwc3-rtk-type_c.o
+obj-$(CONFIG_USB_TYPE_C_RTK_RTS5400) += rtk-rts5400.o
\ No newline at end of file
diff --git a/drivers/usb/dwc3/core.c b/drivers/usb/dwc3/core.c
index 1580d51ae..b5f2e9860 100644
--- a/drivers/usb/dwc3/core.c
+++ b/drivers/usb/dwc3/core.c
@@ -114,7 +114,11 @@ void dwc3_set_prtcap(struct dwc3 *dwc, u32 mode)
 	dwc->current_dr_role = mode;
 }
 
+#if 1 // USB_PATCH_BY_RTK
+int dwc3_core_soft_reset(struct dwc3 *dwc);
+#else
 static int dwc3_core_soft_reset(struct dwc3 *dwc);
+#endif // USB_PATCH_BY_RTK
 
 static void __dwc3_set_mode(struct work_struct *work)
 {
@@ -260,7 +264,11 @@ u32 dwc3_core_fifo_space(struct dwc3_ep *dep, u8 type)
  * dwc3_core_soft_reset - Issues core soft reset and PHY reset
  * @dwc: pointer to our context structure
  */
+#if 1 // USB_PATCH_BY_RTK
+int dwc3_core_soft_reset(struct dwc3 *dwc)
+#else
 static int dwc3_core_soft_reset(struct dwc3 *dwc)
+#endif // USB_PATCH_BY_RTK
 {
 	u32		reg;
 	int		retries = 1000;
@@ -310,6 +318,28 @@ static int dwc3_core_soft_reset(struct dwc3 *dwc)
 
 	return 0;
 }
+#if 1 // USB_PATCH_BY_RTK
+EXPORT_SYMBOL(dwc3_core_soft_reset);
+
+EXPORT_SYMBOL(dwc3_set_prtcap);
+
+#if (IS_ENABLED(CONFIG_USB_DWC3_HOST) | (IS_ENABLED(CONFIG_USB_DWC3_DUAL_ROLE)))
+EXPORT_SYMBOL(dwc3_host_init);
+EXPORT_SYMBOL(dwc3_host_exit);
+#endif
+
+#if (IS_ENABLED(CONFIG_USB_DWC3_GADGET) | (IS_ENABLED(CONFIG_USB_DWC3_DUAL_ROLE)))
+EXPORT_SYMBOL(dwc3_gadget_init);
+EXPORT_SYMBOL(dwc3_gadget_exit);
+#endif
+
+EXPORT_SYMBOL(__traceiter_dwc3_writel);
+EXPORT_SYMBOL(__traceiter_dwc3_readl);
+EXPORT_SYMBOL(__tracepoint_dwc3_writel);
+EXPORT_SYMBOL(__tracepoint_dwc3_readl);
+#endif // USB_PATCH_BY_RTK
+
+
 
 /*
  * dwc3_frame_length_adjustment - Adjusts frame length if required
@@ -963,6 +988,11 @@ static int dwc3_core_init(struct dwc3 *dwc)
 		dwc->phys_ready = true;
 	}
 
+#ifdef CONFIG_USB_PATCH_ON_RTK
+	reg = dwc3_readl(dwc->regs, DWC3_GCTL);
+	dwc3_writel(dwc->regs, DWC3_GCTL, reg | DWC3_GCTL_DSBLCLKGTNG);
+#endif // CONFIG_USB_PATCH_ON_RTK
+
 	usb_phy_init(dwc->usb2_phy);
 	usb_phy_init(dwc->usb3_phy);
 	ret = phy_init(dwc->usb2_generic_phy);
@@ -979,6 +1009,10 @@ static int dwc3_core_init(struct dwc3 *dwc)
 	if (ret)
 		goto err1;
 
+#ifdef CONFIG_USB_PATCH_ON_RTK
+	dwc3_writel(dwc->regs, DWC3_GCTL, reg);
+#endif // CONFIG_USB_PATCH_ON_RTK
+
 	if (hw_mode == DWC3_GHWPARAMS0_MODE_DRD &&
 	    !DWC3_VER_IS_WITHIN(DWC3, ANY, 194A)) {
 		if (!dwc->dis_u3_susphy_quirk) {
@@ -1022,6 +1056,24 @@ static int dwc3_core_init(struct dwc3 *dwc)
 		goto err4;
 	}
 
+#if 1 // USB_PATCH_BY_RTK
+	/* base on commit id 00af62330c39a6c88615a08e7f9d068944e4af69 */
+	switch (dwc->dr_mode) {
+	case USB_DR_MODE_PERIPHERAL:
+		dwc3_set_prtcap(dwc, DWC3_GCTL_PRTCAP_DEVICE);
+		break;
+	case USB_DR_MODE_HOST:
+		dwc3_set_prtcap(dwc, DWC3_GCTL_PRTCAP_HOST);
+		break;
+	case USB_DR_MODE_OTG:
+		dwc3_set_prtcap(dwc, DWC3_GCTL_PRTCAP_OTG);
+		break;
+	default:
+		dev_warn(dwc->dev, "Unsupported mode %d\n", dwc->dr_mode);
+		break;
+	}
+#endif // USB_PATCH_BY_RTK
+
 	/*
 	 * ENDXFER polling is available on version 3.10a and later of
 	 * the DWC_usb3 controller. It is NOT available in the
@@ -1046,6 +1098,14 @@ static int dwc3_core_init(struct dwc3 *dwc)
 		if (dwc->dis_tx_ipgap_linecheck_quirk)
 			reg |= DWC3_GUCTL1_TX_IPGAP_LINECHECK_DIS;
 
+#if 1 // USB_PATCH_BY_RTK
+		if (dwc->dev_force_20_clk_for_30_clk)
+			reg |= DWC3_GUCTL1_DEV_FORCE_20_CLK_FOR_30_CLK;
+
+		if (dwc->parkmode_disable_hs_quirk)
+			reg |= DWC3_GUCTL1_PARKMODE_DISABLE_HS;
+#endif // USB_PATCH_BY_RTK
+
 		if (dwc->parkmode_disable_ss_quirk)
 			reg |= DWC3_GUCTL1_PARKMODE_DISABLE_SS;
 
@@ -1362,6 +1422,12 @@ static void dwc3_get_properties(struct dwc3 *dwc)
 				"snps,dis-u2-freeclk-exists-quirk");
 	dwc->dis_del_phy_power_chg_quirk = device_property_read_bool(dev,
 				"snps,dis-del-phy-power-chg-quirk");
+#if 1 // USB_PATCH_BY_RTK
+	dwc->dev_force_20_clk_for_30_clk = device_property_read_bool(dev,
+				"snps,dev_force_20_clk_for_30_clk");
+	dwc->parkmode_disable_hs_quirk = device_property_read_bool(dev,
+				"snps,parkmode-disable-hs-quirk");
+#endif // USB_PATCH_BY_RTK
 	dwc->dis_tx_ipgap_linecheck_quirk = device_property_read_bool(dev,
 				"snps,dis-tx-ipgap-linecheck-quirk");
 	dwc->parkmode_disable_ss_quirk = device_property_read_bool(dev,
@@ -1505,6 +1571,21 @@ static int dwc3_probe(struct platform_device *pdev)
 	dwc_res = *res;
 	dwc_res.start += DWC3_GLOBALS_REGS_START;
 
+#if 1 // USB_PATCH_BY_RTK
+	/* For some dwc3 controller, the dwc3 global register start address is
+	 * not at DWC3_GLOBALS_REGS_START (0xc100).
+	 */
+	device_property_read_u32(dev, "snps,fixed_dwc3_globals_regs_start",
+				 &dwc->fixed_dwc3_globals_regs_start);
+	if (dwc->fixed_dwc3_globals_regs_start) {
+		dwc_res.start -= DWC3_GLOBALS_REGS_START;
+		dwc_res.start += dwc->fixed_dwc3_globals_regs_start;
+		dev_info(dev,
+		    "fixed dwc3 globals register start address from 0x%x to end 0x%x\n",
+		    (int)dwc_res.start, (int)dwc_res.end);
+	}
+#endif
+
 	regs = devm_ioremap_resource(dev, &dwc_res);
 	if (IS_ERR(regs))
 		return PTR_ERR(regs);
@@ -1890,6 +1971,7 @@ static int dwc3_runtime_idle(struct device *dev)
 #endif /* CONFIG_PM */
 
 #ifdef CONFIG_PM_SLEEP
+
 static int dwc3_suspend(struct device *dev)
 {
 	struct dwc3	*dwc = dev_get_drvdata(dev);
diff --git a/drivers/usb/dwc3/core.h b/drivers/usb/dwc3/core.h
index 79e1b82e5..bdc1eef67 100644
--- a/drivers/usb/dwc3/core.h
+++ b/drivers/usb/dwc3/core.h
@@ -200,6 +200,13 @@
 #define DWC3_EVENTQ		7
 #define DWC3_AUXEVENTQ		8
 
+#if 1 // USB_PATCH_BY_RTK
+/* Global TX Threshold Configuration Register */
+#define DWC3_GTXTHRCFG_MAXTXBURSTSIZE(n) (((n) & 0xff) << 16)
+#define DWC3_GTXTHRCFG_TXPKTCNT(n) (((n) & 0xf) << 24)
+#define DWC3_GTXTHRCFG_PKTCNTSEL BIT(29)
+#endif // USB_PATCH_BY_RTK
+
 /* Global RX Threshold Configuration Register */
 #define DWC3_GRXTHRCFG_MAXRXBURSTSIZE(n) (((n) & 0x1f) << 19)
 #define DWC3_GRXTHRCFG_RXPKTCNT(n) (((n) & 0xf) << 24)
@@ -253,8 +260,14 @@
 #define DWC3_GUCTL_HSTINAUTORETRY	BIT(14)
 
 /* Global User Control 1 Register */
+#if 1 // USB_PATCH_BY_RTK
+#define DWC3_GUCTL1_PARKMODE_DISABLE_HS	BIT(16)
+#endif // USB_PATCH_BY_RTK
 #define DWC3_GUCTL1_PARKMODE_DISABLE_SS	BIT(17)
 #define DWC3_GUCTL1_TX_IPGAP_LINECHECK_DIS	BIT(28)
+#if 1 // USB_PATCH_BY_RTK
+#define DWC3_GUCTL1_DEV_FORCE_20_CLK_FOR_30_CLK BIT(26)
+#endif // USB_PATCH_BY_RTK
 #define DWC3_GUCTL1_DEV_L1_EXIT_BY_HW	BIT(24)
 
 /* Global Status Register */
@@ -554,6 +567,10 @@
 #define DWC3_DEV_IMOD_INTERVAL_SHIFT	0
 #define DWC3_DEV_IMOD_INTERVAL_MASK	(0xffff << 0)
 
+#if 1 // USB_PATCH_BY_RTK
+#define DWC3_DEVICE_IMODI(n)		((0xffff & (n)))
+#endif // USB_PATCH_BY_RTK
+
 /* OTG Configuration Register */
 #define DWC3_OCFG_DISPWRCUTTOFF		BIT(5)
 #define DWC3_OCFG_HIBDISMASK		BIT(4)
@@ -1064,6 +1081,9 @@ struct dwc3_scratchpad_array {
  * @dis_split_quirk: set to disable split boundary.
  * @imod_interval: set the interrupt moderation interval in 250ns
  *			increments or 0 to disable.
+#if 1 // USB_PATCH_BY_RTK
+ * @fixed_dwc3_globals_regs_start: fix the dwc3 global register start address.
+#endif // USB_PATCH_BY_RTK
  */
 struct dwc3 {
 	struct work_struct	drd_work;
@@ -1252,6 +1272,10 @@ struct dwc3 {
 	unsigned		dis_u2_freeclk_exists_quirk:1;
 	unsigned		dis_del_phy_power_chg_quirk:1;
 	unsigned		dis_tx_ipgap_linecheck_quirk:1;
+#if 1 // USB_PATCH_BY_RTK
+	unsigned		dev_force_20_clk_for_30_clk:1;
+	unsigned		parkmode_disable_hs_quirk:1;
+#endif // USB_PATCH_BY_RTK
 	unsigned		parkmode_disable_ss_quirk:1;
 
 	unsigned		tx_de_emphasis_quirk:1;
@@ -1260,8 +1284,11 @@ struct dwc3 {
 	unsigned		dis_metastability_quirk:1;
 
 	unsigned		dis_split_quirk:1;
+	u16                     imod_interval;
 
-	u16			imod_interval;
+#if 1 // USB_PATCH_BY_RTK
+	u32			fixed_dwc3_globals_regs_start;
+#endif // USB_PATCH_BY_RTK
 };
 
 #define INCRX_BURST_MODE 0
@@ -1429,6 +1456,9 @@ struct dwc3_gadget_ep_cmd_params {
 void dwc3_set_prtcap(struct dwc3 *dwc, u32 mode);
 void dwc3_set_mode(struct dwc3 *dwc, u32 mode);
 u32 dwc3_core_fifo_space(struct dwc3_ep *dep, u8 type);
+#if 1 // USB_PATCH_BY_RTK
+int dwc3_core_soft_reset(struct dwc3 *dwc);
+#endif // USB_PATCH_BY_RTK
 
 #define DWC3_IP_IS(_ip)							\
 	(dwc->ip == _ip##_IP)
diff --git a/drivers/usb/dwc3/gadget.c b/drivers/usb/dwc3/gadget.c
index b68fe48ac..eba9aff94 100644
--- a/drivers/usb/dwc3/gadget.c
+++ b/drivers/usb/dwc3/gadget.c
@@ -2395,6 +2395,11 @@ static int dwc3_gadget_start(struct usb_gadget *g,
 	}
 
 	dwc->gadget_driver	= driver;
+
+#ifdef CONFIG_USB_PATCH_ON_RTK
+	dwc->link_state = 0;
+#endif // CONFIG_USB_PATCH_ON_RTK
+
 	spin_unlock_irqrestore(&dwc->lock, flags);
 
 	return 0;
@@ -2421,6 +2426,11 @@ static int dwc3_gadget_stop(struct usb_gadget *g)
 
 	spin_lock_irqsave(&dwc->lock, flags);
 	dwc->gadget_driver	= NULL;
+
+#ifdef CONFIG_USB_PATCH_ON_RTK
+	dwc->link_state = 0;
+#endif // CONFIG_USB_PATCH_ON_RTK
+
 	spin_unlock_irqrestore(&dwc->lock, flags);
 
 	free_irq(dwc->irq_gadget, dwc->ev_buf);
@@ -4001,6 +4011,9 @@ void dwc3_gadget_exit(struct dwc3 *dwc)
 		return;
 
 	usb_del_gadget(dwc->gadget);
+#if 1 // USB_PATCH_BY_RTK
+	dwc->gadget->udc = NULL;
+#endif // USB_PATCH_BY_RTK
 	dwc3_gadget_free_endpoints(dwc);
 	usb_put_gadget(dwc->gadget);
 	dma_free_coherent(dwc->sysdev, DWC3_BOUNCE_SIZE, dwc->bounce,
@@ -4011,6 +4024,10 @@ void dwc3_gadget_exit(struct dwc3 *dwc)
 	kfree(dwc->setup_buf);
 	dma_free_coherent(dwc->sysdev, sizeof(*dwc->ep0_trb) * 2,
 			  dwc->ep0_trb, dwc->ep0_trb_addr);
+
+#if 1 // USB_PATCH_BY_RTK
+	dwc->gadget = NULL;
+#endif // USB_PATCH_BY_RTK
 }
 
 int dwc3_gadget_suspend(struct dwc3 *dwc)
diff --git a/drivers/usb/dwc3/host.c b/drivers/usb/dwc3/host.c
index e19517658..406b82fd4 100644
--- a/drivers/usb/dwc3/host.c
+++ b/drivers/usb/dwc3/host.c
@@ -130,4 +130,8 @@ int dwc3_host_init(struct dwc3 *dwc)
 void dwc3_host_exit(struct dwc3 *dwc)
 {
 	platform_device_unregister(dwc->xhci);
+
+#if 1 // USB_PATCH_BY_RTK
+	dwc->xhci = NULL;
+#endif
 }
-- 
2.17.1

